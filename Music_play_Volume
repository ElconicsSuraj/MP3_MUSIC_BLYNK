// This code has for Controlling Volume , Music next , Music previous , Music pause , Music play functionality

#define BLYNK_TEMPLATE_ID "TMPL3jRssuUcA"
#define BLYNK_TEMPLATE_NAME "Flowmeter"
#define BLYNK_AUTH_TOKEN "R6eiiK8DnfD7uIB2sOVFtLowKIxVA3y-"

#define BLYNK_PRINT Serial
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>
int Vol;



#include "SoftwareSerial.h"
SoftwareSerial mySerial(16, 17);
# define Start_Byte 0x7E
# define Version_Byte 0xFF
# define Command_Length 0x06
# define End_Byte 0xEF
# define Acknowledge 0x00 //Returns info with command 0x41 [0x01: info, 0x00: no info]

# define ACTIVATED LOW

int buttonNext = 2;
int buttonPause = 3;
int buttonPrevious = 4;
boolean isPlaying = false;

char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "Elconics"; // Change your WiFi/Hotspot Name
char pass[] = "Elconics@123"; // Change your WiFi/Hotspot Password

int button = 5;

void setup()
{
  Serial.begin(9600); 
  mySerial.begin (9600);
  delay(1000);
  playFirst();
  isPlaying = true;
  


  Blynk.begin(auth, ssid, pass); // Connect to Blynk server
  delay(2000); // Splash screen delay
}

void loop()
{
  setVolume(Vol);
  Blynk.run(); // Continuously process Blynk-related tasks

 // int state = digitalRead(button);
  

 // BLYNK_WRITE(V3);
}

BLYNK_WRITE(V3)
{
  // Function to handle data from virtual pin V4
     Vol = param.asInt();
  Blynk.virtualWrite(V4, Vol);
  Serial.println(Vol);
  
}

BLYNK_WRITE(V7) {   
  // Called when the datastream virtual pin V2 is updated 
  // by Blynk.Console, Blynk.App, or HTTP API. 

  String value = param.asStr();
  // OR:
  //String value = param.asString();

  if (value == "play") {
       play();
    Serial.println("'play' button pressed");    
  } else if (value == "stop") {
    Pause();
    Serial.println("'stop' button pressed");        
  } else if (value == "prev") {
     playPrevious();
    Serial.println("'prev' button pressed");    
  } else if (value == "next") {
    playNext();
    Serial.println("'next' button pressed");    
  } else {
    Serial.print("V2 = '");
    Serial.print(value);
    Serial.println("'");    
  }
    
} 



void playFirst()
{
  execute_CMD(0x3F, 0, 0);
  delay(500);
  setVolume(Vol);
  delay(50);
  execute_CMD(0x11,0,1); 
  delay(50);
}

void Pause()
{
  execute_CMD(0x0E,0,0);
 //  Serial.println("Stop song");
 // delay(500);
}

void play()
{
  setVolume(Vol);
  execute_CMD(0x0D,0,1); 
//  Serial.println("Play song");
 // delay(500);
}

void playNext()
{
  setVolume(Vol);
  execute_CMD(0x01,0,1);
 //  Serial.println("Next song");
  //delay(500);
}

void playPrevious()
{
  setVolume(Vol);
  execute_CMD(0x02,0,1);
 //  Serial.println("Previous song");
 // delay(500);
}

void setVolume(int Vol)
{
  execute_CMD(0x06, 0, Vol); // Set the volume (0x00~0x30)
  delay(10);
}

void execute_CMD(byte CMD, byte Par1, byte Par2)
// Excecute the command and parameters
{
// Calculate the checksum (2 bytes)
word checksum = -(Version_Byte + Command_Length + CMD + Acknowledge + Par1 + Par2);
// Build the command line
byte Command_line[10] = { Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge,
Par1, Par2, highByte(checksum), lowByte(checksum), End_Byte};
//Send the command line to the module
for (byte k=0; k<10; k++)
{
mySerial.write( Command_line[k]);
}
}
